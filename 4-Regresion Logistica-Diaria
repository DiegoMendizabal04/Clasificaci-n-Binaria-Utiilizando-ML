##REGRESION LOGISTICA PARA BASE DE DATOS DIARIA

# 1- Importamos las librerías necesarias
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix
from imblearn.over_sampling import SMOTE

# 2- Cargamos los datos del DataFrame
data = pd.read_csv('base_diaria.csv', index_col='Date', parse_dates=True)

# 3- Dividimos las columnas en las variables independientes (X) y la variable objetivo (y)
X = data.drop(columns='MCD_Target')
y = data['MCD_Target']

# 4- Dividimos los datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5- Imputamos los valores faltantes en X_train y X_test
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

# 6- Aplicar SMOTE para balancear las clases en los datos de entrenamiento
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train_imputed, y_train)

# Entrenamiento inicial del modelo de regresión logística
logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_resampled, y_resampled)

# Evaluación inicial del modelo
y_pred = logistic_model.predict(X_test_imputed)

# Calcular métricas de evaluación
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

# Imprimir resultados
print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1 Score: {f1:.2f}')
print(f'ROC AUC: {roc_auc:.2f}')

# Mostrar la matriz de confusión
cm = confusion_matrix(y_test, y_pred)
print('Matriz de Confusión:')
print(cm)





